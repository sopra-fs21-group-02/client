/**
 * Dogs app
 * This is the API definition of the dogs owners app.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AreaFilter from '../model/AreaFilter';
import ErrorResponse from '../model/ErrorResponse';
import Park from '../model/Park';
import Review from '../model/Review';

/**
* Parks service.
* @module api/ParksApi
* @version 1.0
*/
export default class ParksApi {

    /**
    * Constructs a new ParksApi. 
    * @alias module:api/ParksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the parksGet operation.
     * @callback module:api/ParksApi~parksGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Park>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all parks
     * @param {module:model/AreaFilter} filter Filter to specify the visual area on the map
     * @param {module:api/ParksApi~parksGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Park>}
     */
    parksGet(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling parksGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Park];
      return this.apiClient.callApi(
        '/parks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parksParkIdDelete operation.
     * @callback module:api/ParksApi~parksParkIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete park with parkId
     * A user can delete a park created by him.
     * @param {Number} parkId Numeric ID of the park
     * @param {module:api/ParksApi~parksParkIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    parksParkIdDelete(parkId, callback) {
      let postBody = null;
      // verify the required parameter 'parkId' is set
      if (parkId === undefined || parkId === null) {
        throw new Error("Missing the required parameter 'parkId' when calling parksParkIdDelete");
      }

      let pathParams = {
        'parkId': parkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/parks/{parkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parksParkIdReviewsGet operation.
     * @callback module:api/ParksApi~parksParkIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all review of park by parkId
     * @param {Number} parkId Numeric ID of the park
     * @param {module:api/ParksApi~parksParkIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    parksParkIdReviewsGet(parkId, callback) {
      let postBody = null;
      // verify the required parameter 'parkId' is set
      if (parkId === undefined || parkId === null) {
        throw new Error("Missing the required parameter 'parkId' when calling parksParkIdReviewsGet");
      }

      let pathParams = {
        'parkId': parkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/parks/{parkId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parksParkIdReviewsPost operation.
     * @callback module:api/ParksApi~parksParkIdReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add review to park with parkId
     * A user can add review to the park.
     * @param {Number} parkId Numeric ID of the park
     * @param {module:model/Review} review Review object that needs to be created
     * @param {module:api/ParksApi~parksParkIdReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    parksParkIdReviewsPost(parkId, review, callback) {
      let postBody = review;
      // verify the required parameter 'parkId' is set
      if (parkId === undefined || parkId === null) {
        throw new Error("Missing the required parameter 'parkId' when calling parksParkIdReviewsPost");
      }
      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling parksParkIdReviewsPost");
      }

      let pathParams = {
        'parkId': parkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/parks/{parkId}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parksPost operation.
     * @callback module:api/ParksApi~parksPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create park
     * A park object that should be created
     * @param {module:model/Park} park 
     * @param {module:api/ParksApi~parksPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    parksPost(park, callback) {
      let postBody = park;
      // verify the required parameter 'park' is set
      if (park === undefined || park === null) {
        throw new Error("Missing the required parameter 'park' when calling parksPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/parks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
