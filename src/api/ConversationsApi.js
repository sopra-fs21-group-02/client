/**
 * Dogs app
 * This is the API definition of the dogs owners app.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChatMessage from '../model/ChatMessage';
import Conversation from '../model/Conversation';
import ErrorResponse from '../model/ErrorResponse';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 1.0
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the messagePost operation.
     * @callback module:api/ConversationsApi~messagePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add message to conversation
     * User can add message in a chart.
     * @param {module:model/ChatMessage} chatMessage A message that needs to be created
     * @param {module:api/ConversationsApi~messagePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    messagePost(chatMessage, callback) {
      let postBody = chatMessage;
      // verify the required parameter 'chatMessage' is set
      if (chatMessage === undefined || chatMessage === null) {
        throw new Error("Missing the required parameter 'chatMessage' when calling messagePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserId1ConversationsUserId2Get operation.
     * @callback module:api/ConversationsApi~usersUserId1ConversationsUserId2GetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChatMessage>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all messages between user1 and user2
     * @param {Number} userId1 Numeric ID of the user1
     * @param {Number} userId2 Numeric ID of the user2
     * @param {module:api/ConversationsApi~usersUserId1ConversationsUserId2GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChatMessage>}
     */
    usersUserId1ConversationsUserId2Get(userId1, userId2, callback) {
      let postBody = null;
      // verify the required parameter 'userId1' is set
      if (userId1 === undefined || userId1 === null) {
        throw new Error("Missing the required parameter 'userId1' when calling usersUserId1ConversationsUserId2Get");
      }
      // verify the required parameter 'userId2' is set
      if (userId2 === undefined || userId2 === null) {
        throw new Error("Missing the required parameter 'userId2' when calling usersUserId1ConversationsUserId2Get");
      }

      let pathParams = {
        'userId1': userId1,
        'userId2': userId2
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ChatMessage];
      return this.apiClient.callApi(
        '/users/{userId1}/conversations/{userId2}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdConversationsGet operation.
     * @callback module:api/ConversationsApi~usersUserIdConversationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all conversations of user by userId
     * @param {Number} userId Numeric ID of the user
     * @param {module:api/ConversationsApi~usersUserIdConversationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    usersUserIdConversationsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdConversationsGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/users/{userId}/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
