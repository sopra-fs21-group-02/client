/**
 * Dogs app
 * This is the API definition of the dogs owners app.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Dog from '../model/Dog';
import ErrorResponse from '../model/ErrorResponse';

/**
* Dogs service.
* @module api/DogsApi
* @version 1.0
*/
export default class DogsApi {

    /**
    * Constructs a new DogsApi. 
    * @alias module:api/DogsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersUserIdDogsDogIdDelete operation.
     * @callback module:api/DogsApi~usersUserIdDogsDogIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete dog with dogId
     * A user can delete his own dog.
     * @param {Number} userId Numeric ID of the user
     * @param {Number} dogId Numeric ID of the dog to delete
     * @param {module:api/DogsApi~usersUserIdDogsDogIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDogsDogIdDelete(userId, dogId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDogsDogIdDelete");
      }
      // verify the required parameter 'dogId' is set
      if (dogId === undefined || dogId === null) {
        throw new Error("Missing the required parameter 'dogId' when calling usersUserIdDogsDogIdDelete");
      }

      let pathParams = {
        'userId': userId,
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/dogs/{dogId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDogsDogIdGet operation.
     * @callback module:api/DogsApi~usersUserIdDogsDogIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dog} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return dog of user by dogId
     * @param {Number} userId Numeric ID of the user
     * @param {Number} dogId Numeric ID of the dog
     * @param {module:api/DogsApi~usersUserIdDogsDogIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dog}
     */
    usersUserIdDogsDogIdGet(userId, dogId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDogsDogIdGet");
      }
      // verify the required parameter 'dogId' is set
      if (dogId === undefined || dogId === null) {
        throw new Error("Missing the required parameter 'dogId' when calling usersUserIdDogsDogIdGet");
      }

      let pathParams = {
        'userId': userId,
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Dog;
      return this.apiClient.callApi(
        '/users/{userId}/dogs/{dogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDogsDogIdPut operation.
     * @callback module:api/DogsApi~usersUserIdDogsDogIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing dog
     * A user can edit dog belonging to his profile.
     * @param {Number} userId Numeric ID of the user
     * @param {Number} dogId Numeric ID of the dog to update
     * @param {module:model/Dog} dog Dog object that needs to be updated
     * @param {module:api/DogsApi~usersUserIdDogsDogIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDogsDogIdPut(userId, dogId, dog, callback) {
      let postBody = dog;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDogsDogIdPut");
      }
      // verify the required parameter 'dogId' is set
      if (dogId === undefined || dogId === null) {
        throw new Error("Missing the required parameter 'dogId' when calling usersUserIdDogsDogIdPut");
      }
      // verify the required parameter 'dog' is set
      if (dog === undefined || dog === null) {
        throw new Error("Missing the required parameter 'dog' when calling usersUserIdDogsDogIdPut");
      }

      let pathParams = {
        'userId': userId,
        'dogId': dogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/dogs/{dogId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDogsGet operation.
     * @callback module:api/DogsApi~usersUserIdDogsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Dog>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all dogs of user with userId
     * @param {Number} userId Numeric ID of the user
     * @param {module:api/DogsApi~usersUserIdDogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Dog>}
     */
    usersUserIdDogsGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDogsGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Dog];
      return this.apiClient.callApi(
        '/users/{userId}/dogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdDogsPost operation.
     * @callback module:api/DogsApi~usersUserIdDogsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add dog to user profile
     * A user can add dog to his own profile.
     * @param {Number} userId Numeric ID of the user
     * @param {module:model/Dog} dog Dog object that needs to be created
     * @param {module:api/DogsApi~usersUserIdDogsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersUserIdDogsPost(userId, dog, callback) {
      let postBody = dog;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdDogsPost");
      }
      // verify the required parameter 'dog' is set
      if (dog === undefined || dog === null) {
        throw new Error("Missing the required parameter 'dog' when calling usersUserIdDogsPost");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/dogs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
