/**
 * Dogs app
 * This is the API definition of the dogs owners app.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AreaFilter from '../model/AreaFilter';
import ErrorResponse from '../model/ErrorResponse';
import Park from '../model/Park';
import Review from '../model/Review';
import WalkingRoute from '../model/WalkingRoute';

/**
* Paths service.
* @module api/PathsApi
* @version 1.0
*/
export default class PathsApi {

    /**
    * Constructs a new PathsApi. 
    * @alias module:api/PathsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pathPathIdReviewsGet operation.
     * @callback module:api/PathsApi~pathPathIdReviewsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all review of walking path by pathId
     * @param {Number} pathId Numeric ID of the path
     * @param {module:api/PathsApi~pathPathIdReviewsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Review>}
     */
    pathPathIdReviewsGet(pathId, callback) {
      let postBody = null;
      // verify the required parameter 'pathId' is set
      if (pathId === undefined || pathId === null) {
        throw new Error("Missing the required parameter 'pathId' when calling pathPathIdReviewsGet");
      }

      let pathParams = {
        'pathId': pathId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Review];
      return this.apiClient.callApi(
        '/path/{pathId}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pathPathIdReviewsPost operation.
     * @callback module:api/PathsApi~pathPathIdReviewsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add review to path with pathId
     * A user can add review to the walking path.
     * @param {Number} pathId Numeric ID of the path
     * @param {module:model/Review} review Review object that needs to be created
     * @param {module:api/PathsApi~pathPathIdReviewsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pathPathIdReviewsPost(pathId, review, callback) {
      let postBody = review;
      // verify the required parameter 'pathId' is set
      if (pathId === undefined || pathId === null) {
        throw new Error("Missing the required parameter 'pathId' when calling pathPathIdReviewsPost");
      }
      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling pathPathIdReviewsPost");
      }

      let pathParams = {
        'pathId': pathId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/path/{pathId}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pathsGet operation.
     * @callback module:api/PathsApi~pathsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Park>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return all paths
     * @param {module:model/AreaFilter} filter Filter to specify the visual area on the map
     * @param {module:api/PathsApi~pathsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Park>}
     */
    pathsGet(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling pathsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Park];
      return this.apiClient.callApi(
        '/paths', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pathsPathIdDelete operation.
     * @callback module:api/PathsApi~pathsPathIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete path with pathId
     * A user can delete a path created by him.
     * @param {Number} pathId Numeric ID of the path
     * @param {module:api/PathsApi~pathsPathIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pathsPathIdDelete(pathId, callback) {
      let postBody = null;
      // verify the required parameter 'pathId' is set
      if (pathId === undefined || pathId === null) {
        throw new Error("Missing the required parameter 'pathId' when calling pathsPathIdDelete");
      }

      let pathParams = {
        'pathId': pathId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/paths/{pathId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pathsPost operation.
     * @callback module:api/PathsApi~pathsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create path
     * A path object that should be created
     * @param {module:model/WalkingRoute} walkingRoute 
     * @param {module:api/PathsApi~pathsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pathsPost(walkingRoute, callback) {
      let postBody = walkingRoute;
      // verify the required parameter 'walkingRoute' is set
      if (walkingRoute === undefined || walkingRoute === null) {
        throw new Error("Missing the required parameter 'walkingRoute' when calling pathsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/paths', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
